@page "/"
@using System.Globalization
@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject IJSRuntime _JS
@inject NavigationManager _NavigationManager
@inject IShoppingCartRepository ShoppingCartRepository

<PageTitle>Home</PageTitle>

@if (IsProcessing)
{
    <div class="position-absolute w-100 vh-100 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="Loading..." />
    </div>
}
else
{


    <div class="container-fluid px-0 m-0 full-width">
        <div class="jumbotron-custom">
            <div class="m-auto d-flex align-items-center" style="width: 400px; height: 50vh;">

                <div class="d-flex align-items-center" style="width: 100%;">
                    <input type="text" class="form-control rounded-pill"
                    value="@_searchText"
                    placeholder="Search for Food Items!"
                    style="width: 100%; padding: 20px;"
                    @oninput="(e => FilterProductByName(((ChangeEventArgs)e).Value?.ToString() ?? string.Empty))" >
                    <span style="position: relative; left: -43px;"><i class="bi bi-search"></i></span>
                </div>
            </div>
        </div>

        <div class="content px-4 m-2">
            <ul class="nav nav-underline justify-content-center mb-2">
                <li class="nav-item">
                    <span class="nav-link @GetActiveTabClass(0)" href="#" style="cursor: pointer" @onclick="() => FilterProducts(0)">All</span>
                </li>
                @foreach (Category c in Categories)
                {
                    <li class="nav-item">
                        <span class="nav-link @GetActiveTabClass(c.Id)" href="#" style="cursor: pointer" @onclick="() => FilterProducts(c.Id)">@c.Name</span>
                    </li>
                }
            </ul>
            <div class="row mt-4 mx-1">

                @foreach (Product p in FilteredProducts)
                {
                    <div class="col-12 col-md-6 col-lg-4 pe-3 mb-5">
                        <div class="card">
                            <div class="mt-3 mb-2 row">
                                <div class="col-6 px-3">
                                    @if (!string.IsNullOrEmpty(p.SpecialTag))
                                    {
                                        <i class="bi bi-star btn btn-outline-success disabled">@p.SpecialTag</i>
                                    }

                                </div>
                                <div class="col-6 text-end px-3 text-danger h-3">
                                    @p.Price.ToString("C", CultureInfo.GetCultureInfo("en-us"))
                                </div>
                            </div>
                            <div class="text-center">
                                @if (!string.IsNullOrEmpty(p.imageUrl))
                                {
                                    <img class="card-img-top img-thumbnail img-rounded w-50 mt-2" src="@p.imageUrl" style="">
                                }
                                else
                                {
                                    <img class="card-img-top img-thumbnail img-rounded w-50 mt-2" src="images/default.png" style="">
                                }

                            </div>
                            <div class="card-body">
                                <h5 class="card-title text-center lead text-success">@p.Name</h5>
                                <p class="card-text mt-2">@((MarkupString)@p.Description)</p>
                                <h4 class="text-center">
                                    <div class="m-lg-auto p-2" @onclick="() => AddOrderItem(p)">
                                        <i class="bi bi-cart3 btn btn-success text-right px-5 form-control"> Add to cart</i>
                                    </div>

                                </h4>

                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>

}

@code {
    [Inject]
    private IProductRepository ProductRepository { get; set; } = null!;

    [Inject]
    private ICategoryRepository CategoryRepository { get; set; } = null!;

    bool IsProcessing { get; set; } = true;
    IEnumerable<Product> Products = new List<Product>();
    IEnumerable<Category> Categories = new List<Category>();
    IEnumerable<Product> FilteredProducts = new List<Product>();

    private int _selectedCategoryId = 0;
    private string _searchText = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadProductsAndCategories();
            IsProcessing = false;
            StateHasChanged();
        }

    }
    private async Task LoadProductsAndCategories()
    {
        Products = await ProductRepository.GetAllProductAsync();
        Categories = await CategoryRepository.GetAllCategoriesAsync();
        FilterProducts(0);
    }

    private void FilterProducts(int categoryId)
    {
        if(categoryId == 0)
        {
            FilteredProducts = Products;
            _selectedCategoryId = categoryId;
            return;
        }
        else
        {
            FilteredProducts = Products.Where(p => p.CategoryId == categoryId).ToList();
            _selectedCategoryId = categoryId;
            _searchText = String.Empty;
        }
    }

    private void FilterProductByName(string newValueOfSearchText)
    {
        if (string.IsNullOrEmpty(newValueOfSearchText))
        {
            FilteredProducts = Products;
        }
        else
        {
            FilteredProducts = Products.Where(p => p.Name.Contains(newValueOfSearchText, StringComparison.InvariantCultureIgnoreCase)).ToList();
            _searchText = newValueOfSearchText;
        }
    }

    private string GetActiveTabClass(int categoryId)
    {
        return categoryId == _selectedCategoryId ? "active" : string.Empty;
    }

    private async Task AddOrderItem(Product product)
    {
        var AuthState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = AuthState.User;
        var authenticated = user.Identity != null && user.Identity.IsAuthenticated;

        if (!authenticated)
        {
            _NavigationManager.NavigateTo("account/login");
        }
        else
        {
           var result = await ShoppingCartRepository.UpdateCartAsync(user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value, product.Id, 1);

            if (result)
            {
                await _JS.ToastrSuccess("Product added to cart successfully");
            }
            else
            {
                await _JS.ToastrError("Error encountered");
            }
        }
        
    }
}
