@page "/product/create"
@page "/product/update/{id:int}"
@inject IProductRepository _productRepository
@inject ICategoryRepository _categoryRepository
@inject NavigationManager _navigationManager
@inject IJSRuntime _jSRuntime
@inject IWebHostEnvironment _webHostEnvironment

@if (IsProcessing)
{
    <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="Loading..." />
    </div>
}
else
{
    <div class="card shadow border-0 m-4">
        <div class="card-header bg-black bg-gradient m-lg-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2">@(Id > 0 ? "Update" : "Create")</h2>
                </div>
            </div>
        </div>
        <div class="card-body p-4">
            <EditForm Model="Product" FormName="ProductUpsertForm" OnValidSubmit="UpsertProduct">
                <DataAnnotationsValidator />

                <!-- Name --> 
                <div class="border p-3 mt-4">
                    <div class="form-floating py-3 col-12">
                        <InputText id="name" class="form-control" @bind-Value="Product.Name" placeholder="Name"/>
                        <label for="name">Name</label>
                        <ValidationMessage For="@(() => Product.Name)" />
                    </div>
                    <!-- Description -->
                    <div class="form-floating py-3 col-12">
                       @*  <label for="description">Description</label> *@
                        <RadzenHtmlEditor @bind-Value=@Product.Description style="height: 450px;" >
@*                             <RadzenHtmlEditorUndo />
                            <RadzenHtmlEditorRedo />
                            <RadzenHtmlEditorSeparator />
                            <RadzenHtmlEditorBold />
                            <RadzenHtmlEditorItalic />
                            <RadzenHtmlEditorUnderline />
                            <RadzenHtmlEditorStrikeThrough />
                            <RadzenHtmlEditorSeparator />
                            <RadzenHtmlEditorColor />
                            <RadzenHtmlEditorBackground />
                            <RadzenHtmlEditorRemoveFormat /> *@
                        </RadzenHtmlEditor>
                        <ValidationMessage For="@(() => Product.Description)" />
                    </div>
                    <!-- Special Tag -->
                    <div class="form-floating py-3 col-12">
                        <InputText id="specialtag" class="form-control" @bind-Value="Product.SpecialTag" placeholder="SpecialTag" />
                        <label for="specialtag">Special Tag</label>
                        <ValidationMessage For="@(() => Product.SpecialTag)" />
                    </div>
                    <!-- Price -->
                    <div class="form-floating py-3 col-12">
                        <InputNumber id="price" class="form-control" @bind-Value="Product.Price" placeholder="Price" />
                        <label for="price">Price</label>
                        <ValidationMessage For="@(() => Product.Price)" />
                    </div>
                    <!-- Category -->
                    <div class="form-floating py-3 col-12">
                        <InputSelect id="category" class="form-select" @bind-Value="Product.CategoryId" placeholder="Category">
                            <option value="0" disabled selected>--Select Category--</option>
                            @foreach (var category in _categories)
                            {
                                <option value="@category.Id">@category.Name</option>
                            }
                        </InputSelect>
                        <label for="category">Category</label>
                        <ValidationMessage For="@(() => Product.CategoryId)" />
                    </div>
                    <!-- Image -->
                    <div class="form-floating py-3 col-12">
                        @if(Product.imageUrl == null){
                            <InputFile id="customFile" OnChange="LoadFiles" class="form-control pb-3" accept="image/png,image/jpeg" />
                            <label for="customFile">Upload Image</label>
                        }

                        @if(Product.imageUrl != null)
                        {
                            <div class="row">
                                <div class="col-3">
                                    <img src="@Product.imageUrl" class="img-thumbnail" />
                                </div>
                                <div class="col-9">
                                    <i class="bi bi-trash btn btn-outline-danger" @onclick="DeleteImage">Remove</i>
                                </div>
                            </div>
                        }
                    </div>
                    <div class="row mt-3">
                        <div class="col-6 col-md-3">
                            <button type="submit" class="btn btn-primary form-control" disabled="@IsProcessing">
                                <i class="bi bi-floppy2-fill"></i>@(Id > 0 ? "Update" : "Create")
                            </button>
                        </div>

                        <div class="col-6 col-md-3">
                            <a href="product" type="submit" class="btn btn-secondary form-control" disabled="@IsProcessing">
                                <i class="bi bi-arrow-bar-left"></i> Back to List
                            </a>
                        </div>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    private Product Product { get; set; } = new Product();

    private IEnumerable<Category> _categories = new List<Category>();

    private bool IsProcessing { get; set; } = true;
    private string? _directoryPath { get; set; }

    protected override Task OnInitializedAsync()
    {
        _directoryPath = Path.Combine(_webHostEnvironment.WebRootPath, "images", "product");
        return base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadProductAndCategoryList();
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task LoadProductAndCategoryList()
    {
        if (Id > 0)
        {
            Product = await _productRepository.GetProductAsync(Id);
        }

        _categories = await _categoryRepository.GetAllCategoriesAsync();
    }

    private async Task UpsertProduct()
    {
        IsProcessing = true;
        StateHasChanged();
        if (Product.Id == 0)
        {
            await _productRepository.CreateProductAsync(Product);
            await _jSRuntime.ToastrSuccess("Product Created Successfully");

        }
        else
        {
            await _productRepository.UpdateProductAsync(Product);
            await _jSRuntime.ToastrSuccess("Product Updated Successfully");
        }
        IsProcessing = false;
        _navigationManager.NavigateTo("product");
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        IsProcessing = true;
        var file = e.File;
        System.IO.FileInfo fileInfo = new(file.Name);
        var newFileName = $"{Guid.NewGuid()}.{fileInfo.Extension}";
        if (!Directory.Exists(_directoryPath))
        {
            Directory.CreateDirectory(_directoryPath);
        }
        var path = Path.Combine(_directoryPath, newFileName);

        await using FileStream fileStream = new(path, FileMode.Create);
        await file.OpenReadStream(file.Size).CopyToAsync(fileStream);
        Product.imageUrl = $"/images/product/{newFileName}";

        IsProcessing = false;
    }

    void DeleteImage(){
        if(Product.imageUrl != null)
        {
            if(_directoryPath != null)
            {
                var fileToDelete = Product.imageUrl.Split("/").Reverse().First();
                var filePathToDeleteImage = Path.Combine(_directoryPath, fileToDelete);

                if (File.Exists(filePathToDeleteImage))
                {
                    File.Delete(filePathToDeleteImage);
                    Product.imageUrl = null;
                }
                else
                {
                    Product.imageUrl = null;
                   
                }

            }

        }
    }
}
